<!doctype html>
<html lang="en" data-theme="dark">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
  <title>TRAKKR • Tokens</title>
  <meta name="color-scheme" content="light dark" />

<style>
  :root{
    /* Dark is the default; light overrides live below */
    --bg: #0b0d10;
    --panel: #14181d;
    --text: #e7edf3;
    --muted:#9aa7b2;
    --accent:#2aa8ff;
    --ok:#2ecc71;
    --warn:#ffb020;
    --danger:#ff5d5d;
    --radius:14px;
    --gap:14px;
    --maxw: 920px;
    --border:#ffffff1f;
    --elev:#00000033;
    --elev2:#00000066;
    --btnghost:#ffffff22;
    --switchTrack:#ffffff1a;
    --shade:#0008;
  }
  [data-theme="light"]{
    --bg:#f5f7fb;
    --panel:#ffffff;
    --text:#0d1117;
    --muted:#546270;
    --accent:#0077ff;
    --border:#0000001a;
    --elev:#0000001a;
    --elev2:#00000033;
    --btnghost:#00000010;
    --switchTrack:#0000001a;
    --shade:#0006;
  }

  *{box-sizing:border-box}
  html,body{height:100%}
  body{
    margin:0; background:var(--bg); color:var(--text);
    font: 14px/1.45 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji";
    display:flex; flex-direction:column; align-items:center;
  }
  header{
    width:100%; display:flex; align-items:center; justify-content:center;
    position:sticky; top:0; background:transparent; padding:10px 12px; z-index:5;
  }
  .bar{
    width:100%; max-width:var(--maxw); display:flex; align-items:center; gap:10px;
  }

  /* --- FIXED BUTTON CENTERING --- */
  .hamburger,
  .theme-toggle {
    width:40px; height:40px;
    border-radius:10px;
    border:1px solid #0000;
    background:var(--panel);
    display:flex;                 
    align-items:center;
    justify-content:center;
    cursor:pointer;
    outline:none;
    box-shadow:0 10px 30px var(--elev);
    padding:0;
    line-height:0;
  }
  .hamburger:focus-visible,
  .theme-toggle:focus-visible {
    box-shadow:0 0 0 2px var(--accent)
  }
  .hamburger span {
    display:block;
    width:18px; height:2px;
    background:var(--text);
    position:relative;
  }
  .hamburger span::before,
  .hamburger span::after {
    content:"";
    position:absolute; left:0; right:0;
    height:2px; background:var(--text);
  }
  .hamburger span::before { top:-6px }
  .hamburger span::after  { top: 6px }

  .title{ font-weight:700; margin-left:6px }
  .spacer{ flex:1 }

  /* Sun/Moon icon */
  .theme-toggle {
    font-size:16px; color:var(--text); border:1px solid var(--border);
  }
  .theme-toggle .icon {
    font-size:18px;
    line-height:1;
    display:flex;
    align-items:center;
    justify-content:center;
  }
  .theme-toggle .label{ display:none }

  main{
    width:100%; display:flex; justify-content:center; padding:10px 12px 40px;
  }
  .stack{ width:100%; max-width:var(--maxw); display:grid; gap:var(--gap); }
  .card{
    width:100%; background:var(--panel);
    border-radius:var(--radius); padding:16px; box-shadow:0 10px 30px var(--elev);
    border:1px solid var(--border);
  }
  form{ display:grid; gap:var(--gap) }
  .row{ display:grid; gap:10px; grid-template-columns:1fr 1fr; }
  .row-3{ grid-template-columns:1fr 1fr 1fr; }
  .row-4{ grid-template-columns:repeat(4,1fr) }
  @media (max-width:800px){
    .row,.row-3,.row-4{ grid-template-columns:1fr }
  }
  .row.token-row{
    grid-template-columns: 1fr auto auto;
    align-items: center;
  }

  label{ display:block; font-size:12px; color:var(--muted); margin-bottom:6px }
  input[type="text"]{
    width:100%; padding:10px 12px; border-radius:10px; border:1px solid var(--border);
    background:#0000; color:var(--text);
  }
  .hint{ color:var(--muted); font-size:12px }
  .status{ margin-top:8px; font-size:12px; color:var(--muted) }

  .actions{ display:flex; gap:10px; justify-content:flex-end; }
  button{
    appearance:none; border:0; border-radius:12px; padding:10px 14px; cursor:pointer;
    background:var(--accent); color:#fff; font-weight:700;
    box-shadow:0 10px 30px var(--elev);
    white-space:nowrap;
  }
  .row.token-row button{ min-width:90px; }
  button[disabled]{ opacity:.6; cursor:default }
  .ghost{ background:var(--btnghost); color:var(--text) }
  .ok{ background:var(--ok) }
  .danger{ background:var(--danger) }
  .divider{ height:1px; background:var(--border); margin:6px 0 }

  /* Hamburger Drawer — forced dark regardless of theme */
      .drawer {
      position:fixed;
      inset:0;
      display:none;
      z-index:1000;   /* make sure drawer is on top */
    }

  .drawer.open{ display:block }
  .drawer .shade{
    position:absolute; inset:0; background:#0008; z-index:0;
  }
  /* Make panel a column container so footer sits at the bottom */
  .drawer .panel{
    position:absolute; top:0; left:0; bottom:0;
    width:min(84vw,340px);
    background:#14181d; color:#e7edf3; padding:14px;
    box-shadow:0 10px 30px #00000066; border-right:1px solid #ffffff1a;
    z-index:1;
    display:flex;                 /* NEW */
    flex-direction:column;        /* NEW */
  }

  /* Let the menu take remaining height; scroll if needed */
  .drawer .panel .menu{ flex:1; overflow:auto; }  /* NEW */

  .panel-footer{                 /* NEW */
    margin-top:auto;
    padding-top:10px;
    border-top:1px solid #ffffff1a;
    color:#9aa7b2;
    font-size:12px;
    display:flex;
    justify-content:space-between;
    align-items:center;
    gap:8px;
  }
  .panel-footer .mono{
    font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    opacity:.9;
  }
  .menu h3{ margin:8px 0 12px; font-size:14px; color:#9aa7b2 }
  .menu .btn{
    width:100%; text-align:left; background:#ffffff12; color:#e7edf3;
    margin-bottom:10px; border:0; border-radius:12px; padding:10px 14px; cursor:pointer;
  }
  .menu .btn.danger{ background:#ff5d5d; color:#fff }

  /* Close button styling */
  .close-btn {
  position:absolute;
  top:10px; right:10px;
  background:none;
  border:0;
  font-size:22px;
  color:#e7edf3;
  cursor:pointer;
  }
  .close-btn:hover,
  .close-btn:focus {
    color:var(--accent);
  }

  /* Toast */
  .toast{
    position:fixed; left:50%; transform:translateX(-50%);
    bottom:18px; background:#000d; color:#fff; padding:10px 14px; border-radius:12px;
    opacity:0; pointer-events:none; transition:.25s;
  }
  .toast.show{ opacity:1 }
  .center-header{ flex:1; display:flex; justify-content:center; gap:6px }
</style>

  <script src="theme.js" defer></script>
</head>
<body>
  <header>
    <div class="bar">
      <button class="hamburger" id="btnMenu" aria-label="Open menu"><span></span></button>
      <div class="center-header"><div class="title">&nbsp;</div></div>
      <div class="spacer"></div>
      <button class="theme-toggle" id="btnTheme" aria-label="Toggle theme" title="Toggle light/dark">
        <span class="icon" aria-hidden="true">🌙</span>
        <span class="label">Theme</span>
      </button>
    </div>
  </header>

  <main>
    <div class="stack">
      <!-- National Rail -->
      <section class="card" id="cardRail">
        <h1>National Rail (Darwin)</h1>
        <p class="hint">Paste your API token then press <strong>Save</strong>. Use <strong>Delete</strong> to clear it.</p>
        <div class="row token-row">
          <input id="railToken" type="text" autocomplete="off" spellcheck="false" placeholder="e.g. 00000000-aaaa-bbbb-cccc-111111111111" />
          <button id="railSave" disabled>Save</button>
          <button id="railDel" class="ghost" disabled>Delete</button>
        </div>
        <div id="railMsg" class="status"></div>
      </section>

      <!-- TfL -->
      <section class="card" id="cardTfl">
        <h1>Transport for London (TfL)</h1>
        <p class="hint">Paste your API token then press <strong>Save</strong>. Use <strong>Delete</strong> to clear it.</p>
        <div class="row token-row">
          <input id="tflToken" type="text" autocomplete="off" spellcheck="false" placeholder="e.g. xxxxxxxxYYYYYYYYzzzzzzzz" />
          <button id="tflSave" disabled>Save</button>
          <button id="tflDel" class="ghost" disabled>Delete</button>
        </div>
        <div id="tflMsg" class="status"></div>
      </section>

      <!-- Weather -->
      <section class="card" id="cardWeather">
        <h1>OpenWeather</h1>
        <p class="hint">Paste your API token then press <strong>Save</strong>. Use <strong>Delete</strong> to clear it.</p>
        <div class="row token-row">
          <input id="weatherToken" type="text" autocomplete="off" spellcheck="false" placeholder="e.g. 36149d21bb69ade019de103326b20000" />
          <button id="weatherSave" disabled>Save</button>
          <button id="weatherDel" class="ghost" disabled>Delete</button>
        </div>
        <div id="weatherMsg" class="status"></div>
      </section>
    </div>
  </main>

  <!-- Drawer -->
  <div class="drawer" id="drawer" aria-hidden="true">
    <div class="shade" id="shade" tabindex="-1" aria-label="Close menu"></div>
    <aside class="panel">
      <button class="close-btn" id="btnCloseDrawer" aria-label="Close menu">✕</button>
      
      <nav class="menu">
        <h3>Device</h3>
        <button class="btn danger" id="btnSwitch">Control Panel</button>
        <div class="divider"></div>
        <h3>Get Tokens</h3>
        <button class="btn" id="btnRail">National Rail</button>
        <button class="btn" id="btnTfL">Transport for London</button>
        <button class="btn" id="btnWeather">OpenWeather</button>
        <div class="divider"></div>
        <h3>Support</h3>
        <button class="btn" id="btnSupport">Email Us</button>
        <button class="btn" id="btnFAQ">Web FAQs</button>
        <div class="divider"></div>
        <h3>Maintenance</h3>
        <button class="btn" id="btnRestart">Restart board</button>
        <button class="btn" id="btnResetWifi">Reset Wi-Fi</button>
        <button class="btn" id="btnCheckUpdates">Check for firmware updates</button>
        <button class="btn" id="btnResetAll">Factory reset</button>
      </nav>
    </aside>
  </div>

  <div class="toast" id="toast" role="status" aria-live="polite">Saved.</div>

  <script>
    // --- Minimal helper utils ---
    const $ = sel => document.querySelector(sel);
    const toast = (msg, ms=1400) => {
      const t = $('#toast'); t.textContent = msg; t.classList.add('show');
      setTimeout(()=>t.classList.remove('show'), ms);
    };
    const fetchJSON = async (url, opts={}) => {
      const r = await fetch(url, opts);
      if (!r.ok) throw new Error('HTTP '+r.status);
      const ct = r.headers.get('content-type')||"";
      return ct.includes('application/json') ? r.json() : r.text();
    };

    // Theme toggle
    const btnTheme = document.querySelector('#btnTheme');
    function getTheme() {
      return (window.__trakkrTheme && typeof window.__trakkrTheme.get === 'function')
        ? window.__trakkrTheme.get()
        : (document.documentElement.getAttribute('data-theme') || 'dark');
    }
    function setTheme(mode){
      if (window.__trakkrTheme && typeof window.__trakkrTheme.set === 'function') {
        window.__trakkrTheme.set(mode);
      } else {
        document.documentElement.setAttribute('data-theme', mode);
      }
      reflectThemeIcon();
    }
    function toggleTheme(){ setTheme(getTheme() === 'dark' ? 'light' : 'dark'); }
    function reflectThemeIcon(){
      const t = getTheme();
      btnTheme.querySelector('.icon').textContent = (t === 'light') ? '🌙' : '☀️';
      btnTheme.title = `Switch to ${t === 'light' ? 'dark' : 'light'} mode`;
    }
    btnTheme.addEventListener('click', toggleTheme);
    window.addEventListener('trakkr-theme-changed', reflectThemeIcon);
    reflectThemeIcon();



        // ---- Reusable Token Editor ----
    function createTokenEditor(cfg){
      const { input, saveBtn, delBtn, msgEl, endpoints } = cfg;
      let loadedToken = '';
      let activeEndpoint = null;

      const setMsg = (t, cls='') => { msgEl.className = 'status '+cls; msgEl.textContent = t || ''; };
      const isMeaningfulToken = t => !!(t && t !== 'dev-token');
      const updateButtons = () => {
        const cur = input.value.trim();
        saveBtn.disabled = !(cur.length > 0 && cur !== loadedToken);
        delBtn.disabled  = !(loadedToken.length > 0);
      };

      const tryFetch = async (url, opt={}) => {
        const r = await fetch(url, opt);
        if (!r.ok) throw new Error('HTTP '+r.status);
        const ct = r.headers.get('content-type') || '';
        if (ct.includes('application/json')) return r.json();
        const text = await r.text();
        try { return JSON.parse(text); } catch { return { token: text }; }
      };

      async function load(){
        for (const ep of endpoints) {
          try {
            const data = await tryFetch(ep, { method:'GET' });
            const tok = (data && typeof data.token === 'string') ? data.token.trim() : '';
            activeEndpoint = ep;
            if (isMeaningfulToken(tok)) {
              loadedToken = tok;
              input.value = tok;
              setMsg('A token is currently stored.');
            } else {
              loadedToken = '';
              input.value = '';
              setMsg('No token found.');
            }
            updateButtons();
            return;
          } catch(_) { /* try next */ }
        }
        activeEndpoint = null;
        loadedToken = '';
        input.value = '';
        setMsg('No token found.', 'err');
        updateButtons();
      }

      async function save(){
        const value = input.value.trim();
        if (!value) return;
        saveBtn.disabled = true; setMsg('Saving…');
        const postTo = async (ep) => {
          try {
            const r = await fetch(ep, {
              method:'POST', headers:{'Content-Type':'application/json'},
              body: JSON.stringify({ token: value })
            });
            if (!r.ok) throw new Error('HTTP '+r.status);
            return true;
          } catch {
            const r2 = await fetch(ep, {
              method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'},
              body: 'token=' + encodeURIComponent(value)
            });
            if (!r2.ok) throw new Error('HTTP '+r2.status);
            return true;
          }
        };
        const list = activeEndpoint ? [activeEndpoint, ...endpoints.filter(e=>e!==activeEndpoint)] : endpoints;
        for (const ep of list) {
          try {
            await postTo(ep);
            activeEndpoint = ep;
            loadedToken = value;
            setMsg('Token saved.', 'ok'); toast('Token saved');
            updateButtons();
            return;
          } catch(_) {}
        }
        setMsg('Save failed: no working endpoint.', 'err'); toast('Save failed'); updateButtons();
      }

      async function del(){
        if (!activeEndpoint) { setMsg('Delete failed: no API endpoint.', 'err'); toast('Delete failed'); return; }
        delBtn.disabled = true; setMsg('Deleting…');
        try {
          const r = await fetch(activeEndpoint, { method:'DELETE' });
          if (!r.ok) throw new Error('HTTP '+r.status);
          loadedToken = '';
          input.value = '';
          setMsg('Token deleted.', 'ok'); toast('Token deleted');
        } catch(e) {
          setMsg('Delete failed: ' + e.message, 'err'); toast('Delete failed');
        }
        updateButtons();
      }

      input.addEventListener('input', updateButtons);
      input.addEventListener('paste', () => setTimeout(updateButtons, 0));
      saveBtn.addEventListener('click', save);
      delBtn .addEventListener('click', del);

      load(); // initial probe
      return { reload: load }; // if you ever need it
    }

    // ---- Instantiate 3 editors with their endpoint lists ----
    const editors = {
      weather: createTokenEditor({
        input:  $('#weatherToken'),
        saveBtn:$('#weatherSave'),
        delBtn: $('#weatherDel'),
        msgEl:  $('#weatherMsg'),
        endpoints: [
          '/api/weather/token','/weather/token',
          '/api/token','/token' // legacy fallback
        ],
      }),
      rail: createTokenEditor({
        input:  $('#railToken'),
        saveBtn:$('#railSave'),
        delBtn: $('#railDel'),
        msgEl:  $('#railMsg'),
        endpoints: [
          '/api/rail/token','/rail/token',
          '/api/darwin/token','/darwin/token'
        ],
      }),
      tfl: createTokenEditor({
        input:  $('#tflToken'),
        saveBtn:$('#tflSave'),
        delBtn: $('#tflDel'),
        msgEl:  $('#tflMsg'),
        endpoints: [
          '/api/tfl/token','/tfl/token',
          '/api/transport/token','/transport/token'
        ],
      }),
    };

    // Drawer logic


    // Drawer logic (copied exactly from Control Panel)
    const drawer = $('#drawer'), shade = $('#shade'), btnMenu = $('#btnMenu');
    function openDrawer(){ drawer.classList.add('open'); drawer.setAttribute('aria-hidden','false'); }
    function closeDrawer(){ drawer.classList.remove('open'); drawer.setAttribute('aria-hidden','true'); }

    btnMenu.addEventListener('click', openDrawer);
    shade.addEventListener('click', closeDrawer);

    const btnClose = document.getElementById('btnCloseDrawer');
    if (btnClose) btnClose.addEventListener('click', closeDrawer);

    window.addEventListener('keydown', e => { if(e.key==='Escape') closeDrawer(); });

    // Menu actions (stub endpoints for now)
    $('#btnSwitch').addEventListener('click', ()=>{
      closeDrawer();
      setTimeout(()=> window.location.href = '/', 150); // small delay so drawer anim closes first
    });
    $('#btnCheckUpdates').addEventListener('click', async ()=>{
      try{ await fetchJSON('/api/firmware/check', { method:'POST' }); toast('Checking…'); }catch(e){ toast('Check failed'); }
      closeDrawer();
    });
    $('#btnRestart').addEventListener('click', async ()=>{
      try{ await fetchJSON('/reboot', { method:'POST' }); toast('Restarting…'); }catch(e){ toast('Restart failed'); }
      closeDrawer();
    });
    $('#btnResetWifi').addEventListener('click', async ()=>{
      if (!confirm('Reset Wi-Fi settings?')) return;
      try{ await fetchJSON('/api/reset-wifi', { method:'POST' }); toast('Wi-Fi reset requested'); }catch(e){ toast('Reset failed'); }
      closeDrawer();
    });
    $('#btnResetAll').addEventListener('click', async ()=>{
      if (!confirm('Factory reset? This clears all settings.')) return;
      try{ await fetchJSON('/api/factory-reset', { method:'POST' }); toast('Resetting…'); }catch(e){ toast('Reset failed'); }
      closeDrawer();
    });
    $('#btnSupport').addEventListener('click', ()=>{
      closeDrawer();
      // open a new mail draft
      window.location.href = 'mailto:support@trakkr.uk?subject=TRAKKR Support';
    });
    $('#btnFAQ').addEventListener('click', ()=>{
      closeDrawer();
      window.open('https://www.trakkr.uk/faq', '_blank', 'noopener');
    });
    $('#btnRail').addEventListener('click', ()=>{
      closeDrawer();
      window.open('https://realtime.nationalrail.co.uk/OpenLDBWSRegistration/Registration', '_blank', 'noopener');
    });
    $('#btnTfL').addEventListener('click', ()=>{
      closeDrawer();
      window.open('https://api-portal.tfl.gov.uk/signup', '_blank', 'noopener');
    });
    $('#btnWeather').addEventListener('click', ()=>{
      closeDrawer();
      window.open('https://home.openweathermap.org/users/sign_up', '_blank', 'noopener');
    });
  </script>
</body>
</html>

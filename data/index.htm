<!doctype html>
<html lang="en" data-theme="dark">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>
  <title>TRAKKR • Control Panel</title>
  <meta name="color-scheme" content="light dark" />

  <script>
  // Initial theme loader (before CSS and theme.js)
  (function(){
    try {
      var KEY='trakkr-theme';
      var m = localStorage.getItem(KEY);
      if (m !== 'light' && m !== 'dark') {
        m = (window.matchMedia && matchMedia('(prefers-color-scheme: light)').matches) ? 'light' : 'dark';
      }
      document.documentElement.setAttribute('data-theme', m || 'dark');
    } catch(e) {}
  })();
  </script>

  <style>
    :root{
      /* Dark is the default; light overrides live below */
      --bg: #0b0d10;
      --panel: #14181d;
      --text: #e7edf3;
      --muted:#9aa7b2;
      --accent:#2aa8ff;
      --ok:#2ecc71;
      --warn:#ffb020;
      --danger:#ff5d5d;
      --radius:14px;
      --gap:14px;
      --maxw: 920px;
      --border:#ffffff1f;
      --elev:#00000033;
      --elev2:#00000066;
      --btnghost:#ffffff22;
      --switchTrack:#ffffff1a;
      --shade:#0008;
    }
    [data-theme="light"]{
      --bg:#f5f7fb;
      --panel:#ffffff;
      --text:#0d1117;
      --muted:#546270;
      --accent:#0077ff;
      --border:#0000001a;
      --elev:#0000001a;
      --elev2:#00000033;
      --btnghost:#00000010;
      --switchTrack:#0000001a;
      --shade:#0006;
    }

    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; background:var(--bg); color:var(--text);
      font: 14px/1.45 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji";
      display:flex; flex-direction:column; align-items:center;
    }
    header{
      width:100%; display:flex; align-items:center; justify-content:center;
      position:sticky; top:0; background:transparent; padding:10px 12px; z-index:5;
    }
    .bar{
      width:100%; max-width:var(--maxw); display:flex; align-items:center; gap:10px;
    }

    /* Buttons */
    .hamburger,
    .theme-toggle{
      width:40px; height:40px;
      border-radius:10px;
      border:1px solid #0000;
      background:var(--panel);
      display:flex;
      align-items:center;
      justify-content:center;
      cursor:pointer;
      outline:none;
      box-shadow:0 10px 30px var(--elev);
      padding:0;
      line-height:0;
    }
    .hamburger:focus-visible,
    .theme-toggle:focus-visible{ box-shadow:0 0 0 2px var(--accent); }
    .hamburger span{ display:block; width:18px; height:2px; background:var(--text); position:relative; }
    .hamburger span::before,
    .hamburger span::after{ content:""; position:absolute; left:0; right:0; height:2px; background:var(--text); }
    .hamburger span::before{ top:-6px }
    .hamburger span::after{  top: 6px }

    .title{ font-weight:700; margin-left:6px }
    .spacer{ flex:1 }

    .theme-toggle{ font-size:16px; color:var(--text); border:1px solid var(--border); }
    .theme-toggle .icon{ font-size:18px; line-height:1; display:flex; align-items:center; justify-content:center; }
    .theme-toggle .label{ display:none }

    main{ width:100%; display:flex; justify-content:center; padding:10px 12px 40px; }
    .card{
      width:100%; max-width:var(--maxw); background:var(--panel);
      border-radius:var(--radius); padding:16px; box-shadow:0 10px 30px var(--elev);
      border:1px solid var(--border);
    }
    form{ display:grid; gap:var(--gap) }
    fieldset{ border:1px solid var(--border); border-radius:12px; padding:12px; }
    legend{ padding:0 6px; color:var(--muted); font-weight:600; font-size:12px }
    .row{ display:grid; gap:10px; grid-template-columns:1fr 1fr; }
    .row-3{ grid-template-columns:1fr 1fr 1fr; }
    .row-4{ grid-template-columns:repeat(4,1fr) }
    @media (max-width:800px){ .row,.row-3,.row-4{ grid-template-columns:1fr } }
    label{ display:block; font-size:12px; color:var(--muted); margin-bottom:6px }
    input[type="text"], select, input[type="time"], input[type="number"]{
      width:100%; padding:10px 12px; border-radius:10px; border:1px solid var(--border);
      background:#0000; color:var(--text);
    }
    .switch{ display:flex; align-items:center; gap:10px }
    .switch input{
      width:42px; height:22px; appearance:none; background:var(--switchTrack);
      border-radius:999px; position:relative; outline:none; cursor:pointer; transition:.2s;
    }
    .switch input:checked{ background:var(--accent) }
    .switch input::after{
      content:""; position:absolute; top:3px; left:3px; width:16px; height:16px;
      border-radius:50%; background:#fff; transition:.2s transform;
    }
    .switch input:checked::after{ transform:translateX(20px) }
    .hint{ color:var(--muted); font-size:12px }
    .actions{ display:flex; gap:10px; justify-content:flex-end; }
    button{
      appearance:none; border:0; border-radius:12px; padding:10px 14px; cursor:pointer;
      background:var(--accent); color:#fff; font-weight:700;
      box-shadow:0 10px 30px var(--elev);
    }
    button[disabled]{ opacity:.6; cursor:default }
    .ghost{ background:var(--btnghost); color:var(--text) }
    .ok{ background:var(--ok) }
    .danger{ background:var(--danger) }
    .divider{ height:1px; background:var(--border); margin:6px 0 }

    /* Drawer */
    .drawer { position:fixed; inset:0; display:none; z-index:1000; }
    .drawer.open{ display:block }
    .drawer .shade{ position:absolute; inset:0; background:#0008; z-index:0; }
    .drawer .panel{
      position:absolute; top:0; left:0; bottom:0; width:min(84vw,340px);
      background:#14181d; color:#e7edf3; padding:14px;
      box-shadow:0 10px 30px #00000066; border-right:1px solid #ffffff1a;
      z-index:1; display:flex; flex-direction:column;
    }
    .drawer .panel .menu{ flex:1; overflow:auto; }
    .panel-footer{
      margin-top:auto; padding-top:10px; border-top:1px solid #ffffff1a;
      color:#9aa7b2; font-size:12px; display:flex; justify-content:space-between; align-items:center; gap:8px;
    }
    .panel-footer .mono{
      font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
      opacity:.9;
    }
    .menu h3{ margin:8px 0 12px; font-size:14px; color:#9aa7b2 }
    .menu .btn{
      width:100%; text-align:left; background:#ffffff12; color:#e7edf3;
      margin-bottom:10px; border:0; border-radius:12px; padding:10px 14px; cursor:pointer;
    }
    .menu .btn.danger{ background:#ff5d5d; color:#fff }
    .close-btn { position:absolute; top:10px; right:10px; background:none; border:0; font-size:22px; color:#e7edf3; cursor:pointer; }
    .close-btn:hover, .close-btn:focus { color:var(--accent); }

    /* Toast */
    .toast{ position:fixed; left:50%; transform:translateX(-50%); bottom:18px; background:#000d; color:#fff; padding:10px 14px; border-radius:12px; opacity:0; pointer-events:none; transition:.25s; }
    .toast.show{ opacity:1 }

    .center-header{ flex:1; display:flex; justify-content:center; gap:6px }

    [hidden]{ display:none !important; }
  </style>

  <!-- Theme loader (runs early; toggler uses its API) -->
  <script src="theme.js" defer></script>
</head>
<body>
  <header>
    <div class="bar">
      <button class="hamburger" id="btnMenu" aria-label="Open menu"><span></span></button>
      <div class="center-header"><div class="title">&nbsp;</div></div>
      <div class="spacer"></div>
      <button class="theme-toggle" id="btnTheme" aria-label="Toggle theme" title="Toggle light/dark">
        <span class="icon" aria-hidden="true">🌙</span><span class="label">Theme</span>
      </button>
    </div>
  </header>

  <main>
    <div class="card">
      <form id="form">
        <!-- Data Source -->
        <fieldset>
          <legend>Data Source</legend>
          <div class="row">
            <div>
              <div class="row" id="boardMode" aria-live="polite">
                <label class="switch"><input type="radio" name="source" value="national-rail" checked /> <span>National Rail</span></label>
                <label class="switch"><input type="radio" name="source" value="underground" /> <span>London Underground</span></label>
                <!--label class="switch"><input type="radio" name="source" value="bus" /> <span>Bus Services</span></label>
                <label class="switch"><input type="radio" name="source" value="tram" /> <span>Tram Services</span></label-->
              </div>
            </div>
        </fieldset>
        <fieldset>

          <legend>Station</legend>
              

          <!-- National Rail only -->
              
              <datalist id="stations-list"></datalist>
          
              <div id="nrOnly" class="row" aria-live="polite" hidden>
                <div>
                  <input id="station" name="station_display" type="text"
                        placeholder="e.g., London Waterloo / WAT"
                        autocomplete="off" list="stations-list">
                  <input type="hidden" id="station_crs" name="station_crs">
                  <div class="hint">&nbsp;</div>
                    <label for="callingAt">Only show trains calling at</label>
                    <input id="callingAt" name="callingAt_display" type="text"
                          placeholder="e.g., Clapham Junction / CLJ"
                          autocomplete="off" list="stations-list">
                    <input type="hidden" id="callingAt_crs" name="callingAt_crs">
                  <div class="hint">&nbsp;</div>
                  <div class="row">
                    <label class="switch">
                      <input type="radio" name="nrBoardType" value="arrivals" checked />
                      <span>Arrivals</span>
                    </label>
                    <label class="switch">
                      <input type="radio" name="nrBoardType" value="departures" />
                      <span>Departures</span>
                    </label>
                  </div>
                </div>
                <div class="hint">&nbsp;</div>
                <div>
                  <label class="switch">
                    <input id="includeBus" name="includeBus" type="checkbox" />
                    <span>Include bus replacement services</span>
                  </label>
                  <label class="switch">
                    <input id="includePass" name="includePass" type="checkbox" />
                    <span>Include passing through trains</span>
                  </label>
                  <label class="switch">
                    <input id="includeWeather" name="includeWeather" type="checkbox" />
                    <span>Include local weather</span>
                  </label>
                </div>       
              </div>


          <!-- Tube only -->

          <div id="tubeOnly" class="row" aria-live="polite" hidden>
            <div>
              <input id="tube" name="tube_display" type="text"
                     placeholder="e.g., Baker Street"
                     autocomplete="off" list="tfl-list">
              <datalist id="tfl-list"></datalist>
              <input type="hidden" id="station_tube" name="station_tube">
              <div class="hint">&nbsp;</div>
            <div class="row">
              <div>
                <label for="line">Underground Line</label>
                <select id="line" name="line">
                  <option value="">— Select —</option>
                  <option>Bakerloo</option><option>Central</option><option>Circle</option>
                  <option>District</option><option>Hammersmith & City</option>
                  <option>Jubilee</option><option>Metropolitan</option><option>Northern</option>
                  <option>Piccadilly</option><option>Victoria</option><option>Waterloo & City</option>
                </select>
              </div>
              <div>
                <label for="direction">Direction</label>
                <select id="direction" name="direction">
                  <option value="">— Select —</option>
                  <option value="inbound">Inbound</option>
                  <option value="outbound">Outbound</option>
                  <option value="northbound">Northbound</option>
                  <option value="southbound">Southbound</option>
                  <option value="eastbound">Eastbound</option>
                  <option value="westbound">Westbound</option>
                </select>
              </div>
            </div>
          </div>


        </fieldset>

        <!-- Extras -->
        <fieldset>
          <legend>Extras</legend>
          <div class="row-3">
            <div class="switch">
              <input id="showDate" name="showDate" type="checkbox" />
              <label for="showDate">Show current date</label>
            </div>

            <div class="switch">
              <input id="autoUpdate" name="autoUpdate" type="checkbox" />
              <label for="autoUpdate">Enable automatic updates</label>
            </div>
          </div>
          <div class="row">
            <div>
              <label for="updateEvery">&nbsp;</label>
              <div class="hint">Refresh onscreen data every <span id="updateEveryVal">30</span> seconds</div>
              <input id="updateEvery" name="updateEvery" type="range" min="15" max="60" step="5" value="30" />
              
            </div>
            <div class="row">
              <div>
                <label for="ssStart">Screensaver start</label>
                <input id="ssStart" name="ssStart" type="time" value="23:00" />
              </div>
              <div>
                <label for="ssEnd">Screensaver end</label>
                <input id="ssEnd" name="ssEnd" type="time" value="06:00" />
              </div>
            </div>
          </div>
        </fieldset>

        <!-- Actions -->
        <div class="actions">
          <button type="button" class="ghost" id="btnReload">Reload</button>
          <button type="submit" id="btnSave">Save Settings</button>
        </div>
      </form>
    </div>
  </main>

  <!-- Drawer -->
  <div class="drawer" id="drawer" aria-hidden="true">
    <div class="shade" id="shade" tabindex="-1" aria-label="Close menu"></div>
    <aside class="panel">
      <button class="close-btn" id="btnCloseDrawer" aria-label="Close menu">✕</button>
      <nav class="menu">
        <h3>Device</h3>
        <button class="btn danger" id="btnSwitch">API Management</button>
        <div class="divider"></div>
        <h3>Get Tokens</h3>
        <button class="btn" id="btnRail">National Rail</button>
        <button class="btn" id="btnTfL">Transport for London</button>
        <button class="btn" id="btnWeather">OpenWeather</button>
        <div class="divider"></div>
        <h3>Support</h3>
        <button class="btn" id="btnSupport">Email Us</button>
        <button class="btn" id="btnFAQ">Web FAQs</button>
        <div class="divider"></div>
        <h3>Maintenance</h3>
        <button class="btn" id="btnRestart">Restart board</button>
        <button class="btn" id="btnResetWifi">Reset Wi-Fi</button>
        <button class="btn" id="btnCheckUpdates">Check for firmware updates</button>
        <button class="btn" id="btnResetAll">Factory reset</button>
      </nav>
      <div class="panel-footer">
        <span>TRAKKR</span>
        <span class="mono" id="buildInfo">Version unknown</span>
      </div>
    </aside>
  </div>
  <div class="toast" id="toast" role="status" aria-live="polite">Saved.</div>


<!-------------------------------------------------------------------------------------

  JavaScript: all in one file for simplicity and caching
  - Helpers ($, show, toast, fetchJSON)
  - Theme toggle (uses theme.js API if available)
  - Elements        
  - Board Mode (radios)
  - Station picker (single source of truth)
  - Settings load/save     

-------------------------------------------------------------------------------------->


  <script>
    /* ---------- tiny helpers ---------- */

    const $ = s => document.querySelector(s);
      // [TRAKKR] Source value mapping between UI and firmware
    const toWire = v => (v === 'underground' ? 'tube' : (v === 'national-rail' ? 'rail' : v));
    const toUi   = v => (v === 'tube' ? 'underground' : (v === 'rail' ? 'national-rail' : v));

    const show = (el, v=true) => { if (el) el.hidden = !v; };
    const toast = (msg, ms=1400) => { const t=$('#toast'); if(!t) return; t.textContent=msg; t.classList.add('show'); setTimeout(()=>t.classList.remove('show'), ms); };
    const fetchJSON = async (url, opts={}) => {
      const ctrl = new AbortController(); const t = setTimeout(()=>ctrl.abort(), 8000);
      try {
        const r = await fetch(url, { ...opts, headers:{'Content-Type':'application/json', ...(opts.headers||{})}, signal:ctrl.signal });
        if(!r.ok) throw new Error(r.status + ' ' + r.statusText);
        const ct = r.headers.get('content-type')||"";
        return ct.includes('application/json') ? r.json() : r.text();
      } finally { clearTimeout(t); }
    };

    /* ---------- theme toggle ---------- */

    const btnTheme = $('#btnTheme');
    function getTheme(){ return (window.__trakkrTheme?.get?.() ?? document.documentElement.getAttribute('data-theme') ?? 'dark'); }
    function setTheme(mode){
      if (window.__trakkrTheme?.set) {
        window.__trakkrTheme.set(mode);
      } else {
        // Fallback path (in case theme.js hasn’t loaded yet)
        const m = (mode === 'light') ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', m);
        try { localStorage.setItem('trakkr-theme', m); } catch {}
        reflectThemeIcon();
      }
    }
    function toggleTheme(){ setTheme(getTheme()==='dark'?'light':'dark'); }
    function reflectThemeIcon(){ const t=getTheme(); btnTheme.querySelector('.icon').textContent = (t==='light')?'🌙':'☀️'; btnTheme.title=`Switch to ${t==='light'?'dark':'light'} mode`; }
    btnTheme?.addEventListener('click', toggleTheme);
    window.addEventListener('trakkr-theme-changed', reflectThemeIcon);
    reflectThemeIcon();

    /* ---------- elements ---------- */

    const elForm = $('#form');
    const elNrOnly = $('#nrOnly');
    const elTubeOnly = $('#tubeOnly');
    const elWeatherWrap = $('#weatherWrap');
    const elUpdateEvery    = $('#updateEvery');
    const elUpdateEveryVal = $('#updateEveryVal');

    function reflectUpdateEveryLabel(){
      if (!elUpdateEvery || !elUpdateEveryVal) return;
      elUpdateEveryVal.textContent = String(elUpdateEvery.value);
    }

    // live preview while sliding
    elUpdateEvery?.addEventListener('input', reflectUpdateEveryLabel);


    /* ---------- Board Mode (radios) ---------- */

    const sourceRadios   = Array.from(document.querySelectorAll('input[name="source"]'));
    const sourceValues   = new Set(sourceRadios.map(r => r.value));
    const getSourceValue = () => {
      const ui = sourceRadios.find(r => r.checked)?.value || null;
      return ui; // return UI label; use toWire() when sending to firmware
    };

    // Hide/show AND disable/enable the inputs inside each section
    function toggleGroup(el, on){
      if (!el) return;
      el.hidden = !on;
      el.querySelectorAll('input,select,textarea,button').forEach(c => { c.disabled = !on; });
    }

    function applySourceVisibility(){
      const mode = getSourceValue();
      const isNR = (mode === 'national-rail');          // UI value
      toggleGroup(elNrOnly,      isNR);
      toggleGroup(elWeatherWrap, isNR);
      toggleGroup(elTubeOnly,   !isNR);
    }

    function setSourceValue(v){
      const ui = toUi(v);                                 // accept 'rail'/'tube' too
      const fallback = 'national-rail';
      const next = sourceValues.has(ui) ? ui : (getSourceValue() || fallback);
      sourceRadios.forEach(r => { r.checked = (r.value === next); });
      applySourceVisibility();
    }

    // Ensure a valid default before any async work runs
    if (!getSourceValue()) setSourceValue('national-rail');
    else applySourceVisibility();

    // React to user changes (listen to both just in case)
    sourceRadios.forEach(r => {
      r.addEventListener('change', applySourceVisibility);
      r.addEventListener('input',  applySourceVisibility);
    });


    /* ---------- Station picker (single source of truth) ---------- */

    const STATIONS_URL = '/stations.min.json'; // file sits at FS root
    const stationInput  = document.getElementById('station');
    const stationHidden = document.getElementById('station_crs');
    const stationList   = document.getElementById('stations-list');
    const stationsMeta  = document.getElementById('stationsMeta');

    let STATIONS = [];                 // [{stationName, crsCode}]
    const byCrs = new Map();           // CRS -> Name
    const displayOf = (name, crs) => `${name} (${crs})`;
    const PENDING = { crs: null };     // apply after list loads, if needed

    async function loadStations(){
      if (stationsMeta) stationsMeta.textContent = 'Stations: loading…';
      const r = await fetch(STATIONS_URL, { cache:'no-store' });
      if (!r.ok) throw new Error(r.status + ' ' + r.statusText);
      const ct = (r.headers.get('content-type')||'').toLowerCase();
      const raw = ct.includes('application/json') ? await r.json() : JSON.parse(await r.text());

      STATIONS = raw.map(x => ({
        stationName: x.stationName || x.name,
        crsCode: String(x.crsCode || x.crs || '').toUpperCase()
      })).filter(s => s.stationName && /^[A-Z]{3}$/.test(s.crsCode));

      byCrs.clear();
      STATIONS.forEach(s => byCrs.set(s.crsCode, s.stationName));

      // build datalist: both "Name (CRS)" and "CRS"
      stationList.innerHTML = '';
      const frag = document.createDocumentFragment();
      for (const s of STATIONS){
        const a = document.createElement('option'); a.value = displayOf(s.stationName, s.crsCode); a.dataset.crs = s.crsCode; frag.appendChild(a);
        const b = document.createElement('option'); b.value = s.crsCode;                           b.dataset.crs = s.crsCode; frag.appendChild(b);
      }
      stationList.appendChild(frag);
      if (stationsMeta) stationsMeta.textContent = `${STATIONS.length} stations loaded. Enter a station name or CRS code`;

      // if we loaded settings before stations, apply pending CRS now
      if (PENDING.crs) { setFromCRS(PENDING.crs); PENDING.crs = null; }
    }

    function setFromCRS(crs){
      const code = String(crs||'').toUpperCase();
      const name = byCrs.get(code);
      if (!name) return false;
      if (stationInput) stationInput.value  = displayOf(name, code);
      if (stationHidden) stationHidden.value = code;
      return true;
    }

    function syncFromInput(){
      const v = (stationInput?.value || '').trim();
      // exact option match
      const opt = Array.from(stationList.options).find(o => o.value === v);
      if (opt?.dataset?.crs){ setFromCRS(opt.dataset.crs); return; }
      // "Name (CRS)"
      const m = v.match(/\(([A-Za-z]{3})\)\s*$/);
      if (m && setFromCRS(m[1])) return;
      // bare CRS
      if (/^[A-Za-z]{3}$/.test(v)) { setFromCRS(v); return; }
      if (stationHidden) stationHidden.value = '';
    }

    // input UX
    stationInput?.addEventListener('focus', e => { const i=e.target; i.dataset.old=i.value; i.value=''; i.dataset.changed=''; });
    stationInput?.addEventListener('input', e => { e.target.dataset.changed='1'; });
    stationInput?.addEventListener('change', syncFromInput);
    stationInput?.addEventListener('blur', e => {
      syncFromInput();
      const i=e.target; if(!i.dataset.changed) i.value=i.dataset.old || '';
      delete i.dataset.changed; delete i.dataset.old;
    });

    /* ---------- settings load/save ---------- */

    async function loadSettings(){
      let s = {};
      try { s = await fetchJSON('/api/settings', { method:'GET' }); } catch {}

      // Source: apply saved if valid; never unset existing selection
      const savedSource = s?.source ?? s?.src ?? s?.mode ?? null;
      if (savedSource) setSourceValue(savedSource); else setSourceValue('national-rail');

      applySourceVisibility();

      // Station (prefer CRS; keep display fallback)
      const savedCrs = (s?.station_crs ?? s?.station ?? s?.crs ?? '').toUpperCase();
      if (savedCrs){
        if (!setFromCRS(savedCrs)){
          // stations not loaded yet; remember to apply later
          PENDING.crs = savedCrs;
        }
      } else if (s?.station_display){
        stationInput.value = s.station_display;
        syncFromInput();
      }

      // Other bits
      if (s?.nrBoardType){
        const r = document.querySelector(`input[name="nrBoardType"][value="${s.nrBoardType}"]`);
        if (r) r.checked = true;
      }
      if (s?.callingAt) $('#callingAt').value = s.callingAt;
      $('#includeBus').checked     = !!s?.includeBus;
      $('#includePass').checked    = !!s?.includePass;
      $('#showDate').checked       = !!s?.showDate;
      $('#includeWeather').checked = !!s?.includeWeather;
      $('#autoUpdate').checked     = !!s?.autoUpdate;
      // Update interval (slider)
        if (typeof s?.updateEvery === 'number') {
          const v = Math.min(60, Math.max(15, s.updateEvery|0)); // clamp to slider range
          elUpdateEvery.value = v;
        } else {
          elUpdateEvery.value = 30; // default
        }
        reflectUpdateEveryLabel(); // keep the hint in sync

      if (s?.ssStart) $('#ssStart').value = s.ssStart;
      if (s?.ssEnd)   $('#ssEnd').value   = s.ssEnd;
      if (s?.line) $('#line').value = s.line;
      if (s?.direction) $('#direction').value = s.direction;
    }

    elForm?.addEventListener('submit', async (ev)=>{
      ev.preventDefault();
      const btn = document.getElementById('btnSave');
      if (btn) btn.disabled = true;

      syncFromInput();
      const code = (stationHidden?.value || '').toUpperCase();
      const display = (stationInput?.value || '').trim();

      const data = {
        // keep both for FW compatibility
        station: code,
        station_crs: code,
        station_display: display,

        source: toWire(getSourceValue()) || 'rail',
        nrBoardType: (document.querySelector('input[name="nrBoardType"]:checked')||{}).value || 'arrivals',
        callingAt: ($('#callingAt')?.value || '').trim(),
        includeBus: $('#includeBus')?.checked || false,
        includePass: $('#includePass')?.checked || false,
        showDate: $('#showDate')?.checked || false,
        includeWeather: $('#includeWeather')?.checked || false,
        autoUpdate: $('#autoUpdate')?.checked || false,
        updateEvery: Number(elUpdateEvery?.value || 30),
        ssStart: $('#ssStart')?.value || "23:00",
        ssEnd: $('#ssEnd')?.value || "06:00",
        line: $('#line')?.value || '',
        direction: $('#direction')?.value || '',
      };

      try{
        await fetchJSON('/api/settings', { method:'POST', body: JSON.stringify(data) });
        toast('Settings saved');
      }catch{
        toast('Save failed');
      }finally{
        if (btn) btn.disabled = false;
      }
    });

    // Version info for side panel

    (async () => {
      const el = document.getElementById('buildInfo');
      if (!el) return;
      try {
        const res = await fetch('/api/version', { cache:'no-store' });
        if (!res.ok) throw 0;
        const ct = res.headers.get('content-type') || '';
        let info;
        if (ct.includes('application/json')) info = await res.json();
        else {
          const text = (await res.text()).trim();
          try { info = JSON.parse(text); } catch { info = { version: text }; }
        }
        const ver = info.version || info.appVersion || '';
        const build = info.build || info.buildNumber || info.commit || '';
        const parts = [];
        if (ver) parts.push('v'+ver);
        if (build) parts.push('build '+build);
        el.textContent = parts.length ? parts.join(' • ') : 'Version unknown';
      } catch {
        el.textContent = 'Version unknown';
      }
    })();

    /* ---------- Drawer + misc actions ---------- */
    $('#btnReload')?.addEventListener('click', ()=>{ loadSettings(); });
    const drawer = $('#drawer'), shade = $('#shade'), btnMenu = $('#btnMenu');
    const openDrawer = () => { drawer.classList.add('open'); drawer.setAttribute('aria-hidden','false'); };
    const closeDrawer = () => { drawer.classList.remove('open'); drawer.setAttribute('aria-hidden','true'); };
    btnMenu?.addEventListener('click', openDrawer);
    shade?.addEventListener('click', closeDrawer);
    const btnClose = document.getElementById('btnCloseDrawer'); if (btnClose) btnClose.addEventListener('click', closeDrawer);
    window.addEventListener('keydown', e => { if (e.key === 'Escape') closeDrawer(); });
    $('#btnSwitch')?.addEventListener('click', ()=>{ closeDrawer(); setTimeout(()=> location.href='/token.htm', 150); });
    $('#btnCheckUpdates')?.addEventListener('click', async ()=>{ try{ await fetchJSON('/api/firmware/check', { method:'POST' }); toast('Checking…'); }catch{ toast('Check failed'); } closeDrawer(); });
    $('#btnRestart')?.addEventListener('click', async ()=>{ try{ await fetchJSON('/reboot', { method:'POST' }); toast('Restarting…'); }catch{ toast('Restart failed'); } closeDrawer(); });
    $('#btnResetWifi')?.addEventListener('click', async ()=>{ if (!confirm('Reset Wi-Fi settings?')) return; try{ await fetchJSON('/api/reset-wifi', { method:'POST' }); toast('Wi-Fi reset requested'); }catch{ toast('Reset failed'); } closeDrawer(); });
    $('#btnResetAll')?.addEventListener('click', async ()=>{ if (!confirm('Factory reset? This clears all settings.')) return; try{ await fetchJSON('/api/factory-reset', { method:'POST' }); toast('Resetting…'); }catch{ toast('Reset failed'); } closeDrawer(); });
    $('#btnSupport')?.addEventListener('click', ()=>{ closeDrawer(); location.href='mailto:support@trakkr.uk?subject=TRAKKR Support'; });
    $('#btnFAQ')?.addEventListener('click', ()=>{ closeDrawer(); window.open('https://www.trakkr.uk/faq','_blank','noopener'); });
    $('#btnRail')?.addEventListener('click', ()=>{ closeDrawer(); window.open('https://realtime.nationalrail.co.uk/OpenLDBWSRegistration/Registration','_blank','noopener'); });
    $('#btnTfL')?.addEventListener('click', ()=>{ closeDrawer(); window.open('https://api-portal.tfl.gov.uk/signup','_blank','noopener'); });
    $('#btnWeather')?.addEventListener('click', ()=>{ closeDrawer(); window.open('https://home.openweathermap.org/users/sign_up','_blank','noopener'); });

    /* ---------- Boot ---------- */

    reflectUpdateEveryLabel();

    if (!getSourceValue()) setSourceValue('national-rail');
    applySourceVisibility();

    // restore settings ASAP, then load stations; pending CRS is applied after stations arrive
    (async ()=>{
      await loadSettings();
      try { await loadStations(); } catch(e){ if (stationsMeta) stationsMeta.textContent = 'Stations failed to load'; console.error(e); }
    })();
  </script>
</body>
</html>
